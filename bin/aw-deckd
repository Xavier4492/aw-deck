#!/usr/bin/env bash
set -euo pipefail

AW_URL="${AW_URL:-http://127.0.0.1:5600}"
BASEURL="$AW_URL/api/0"
HOST="$(hostname)"
BUCKET="aw-watcher_deck_${HOST}"

STATE_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/aw-deck"
STATE="$STATE_DIR/state.json"
mkdir -p "$STATE_DIR"
[ -f "$STATE" ] || echo '{"active":false}' > "$STATE"

# Paramètres (tu peux ajuster via la unit systemd)
INTERVAL="${INTERVAL:-10}"     # toutes les 10 s on envoie un heartbeat
PULSETIME="${PULSETIME:-30}"   # fusionne les pulses à <= 30 s

log(){ echo "aw-deckd: $*"; }

wait_aw() {
  for i in {1..60}; do
    if curl -sSf --connect-timeout 1 --max-time 2 "$BASEURL/info" >/dev/null; then
      return 0
    fi
    sleep 1
  done
  log "WARNING: ActivityWatch API indisponible après 60s ($BASEURL)"
}

bucket_exists() {
  curl -sSf --connect-timeout 1 --max-time 2 "$BASEURL/buckets/$BUCKET" >/dev/null
}

create_bucket() {
  curl -sS -w " HTTP:%{http_code}\n" --connect-timeout 1 --max-time 2 \
    -X POST "$BASEURL/buckets/$BUCKET" \
    -H 'Content-Type: application/json' \
    -d "{\"type\":\"custom.deck\",\"client\":\"deck\",\"hostname\":\"$HOST\"}"
}

wait_aw

if ! bucket_exists; then
  log "Bucket absent, création: $BUCKET"
  if ! create_bucket | tee /dev/stderr | grep -Eq 'HTTP:20(0|1)$'; then
    log "ERREUR: création bucket a échoué. Vérifie aw-server et $BASEURL."
  fi
fi

log "running (bucket=$BUCKET, interval=$INTERVAL, pulsetime=$PULSETIME, base=$BASEURL)"

run_loop() {
  local client proj tache TS data
  while true; do
    if [ -f "$STATE" ] && jq -e . "$STATE" >/dev/null 2>&1; then
      # Vérifie que le JSON est valide ; sinon on saute ce tour de boucle
      if [ "$(jq -r '.active // false' "$STATE")" = "true" ]; then
        client=$(jq -r '.client // empty' "$STATE")
        proj=$(jq -r '.projet // empty' "$STATE")
        tache=$(jq -r '.tache // empty' "$STATE")
        if [ -n "$client" ]; then
          TS=$(date -Is)
          data=$(jq -nc --arg client "$client" --arg projet "$proj" --arg tache "$tache" \
                '{client:$client} | if ($projet|length)>0 then .projet=$projet else . end
                                | if ($tache|length)>0  then .tache=$tache  else . end')
          # Heartbeat : si 404 → on retente de créer le bucket immédiatement, puis on ré-essaie
          if ! curl -sSf --connect-timeout 1 --max-time 2 \
              -X POST "$BASEURL/buckets/$BUCKET/heartbeat?pulsetime=$PULSETIME" \
              -H 'Content-Type: application/json' \
              -d "{\"timestamp\":\"$TS\",\"duration\":$INTERVAL,\"data\":$data}" >/dev/null; then
            log "heartbeat: erreur → tentative (re)création bucket…"
            create_bucket >/dev/stderr || true
            # retente immédiatement une fois
            curl -sSf --connect-timeout 1 --max-time 2 \
              -X POST "$BASEURL/buckets/$BUCKET/heartbeat?pulsetime=$PULSETIME" \
              -H 'Content-Type: application/json' \
              -d "{\"timestamp\":\"$TS\",\"duration\":$INTERVAL,\"data\":$data}" >/dev/null || \
              log "heartbeat: toujours en erreur après (re)création"
          fi
        fi
      else
        # Inactif : rien à faire
        :
      fi
    fi
    sleep "$INTERVAL"
  done
}

run_loop
